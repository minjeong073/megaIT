package standard.ch6OOP.example;

public class OOP1 {

    /*

    객체지향언어(Object-Oriented Program)
    <>
    "실제 세계는 사물(객체)로 이루어져 있으며, 발생하는 모든 사건들은 사물간의 상호작용이다"

    특징 : 코드의 재사용성이 높다
        : 코드의 관리가 용이하다
        : 신뢰성이 높은 프로그래밍을 가능하게 한다
        (제어자와 메서드를 이용해서 데이터 보호, 유지)

    ** 재사용성, 유지보수, 중복된 코드 제거 **

    클래스 : 객체를 정의해 놓은 것 -> 객체를 생성하는데 사용됨
    객체 : 실제로 존재하는 것(사물, 개념) -> 속성과 기능으로 구성

    1.
    클래스를 정의하고 클래스를 통해 객체를 생성하는 이유
    : 클래스를 한번만 잘 만들어 놓으면 매번 객체를 생성할 때마다 어떻게 객체를 만들어야 할지 고민하지 않아도 됨

    instantiate (클래스의 인스턴스화) : 클래스로부터 객체를 만드는 과정
    instance (클래스의 인스턴스) : 클래스로부터 만들어진 객체

    2.
    객체가 가지고 있는 속성과 기능 = 객체의 멤버(member)
    속성(property) : 멤버변수(member variable), 특성(attribute), 필드(field), 상태(state)
    기능(function) : 메서드(method), 함수(function), 행위(behavior)


    < 2.6 클래스의 또 다른 정의>

    변수(데이터)와 함수를 하나의 클래스에 저장
    --> C 언어에서는 문자열을 문자의 배열로 다루지만 자바에서는 String 이라는 클래스로 문자열을 다룸
        문자열을 단순히 문자의 배열로 정의하지 않고, 문자열과 문자열을 다루는데 필요한 함수들을 함께 묶기 위함

    클래스 - 사용자 정의 타입
    : 자료형(primitive type) 이외에 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는 것
    : 클래스가 곧 사용자 정의 타입


    <3. 변수와 메서드>

    종류 : 클래스변수, 인스턴스변수, 지역변수

    - 클래스변수 : 클래스 영역에 선언 / 클래스가 메모리에 올라갈 때 생성
               : 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 할 경우
               : 인스턴스를 생성하지 않고도 '클래스이름.클래스변수' 로 사용 가능
               : public 붙이면 같은 프로그램 내에서 어디서나 접근 할 수 있는 전역변수 성격을 가짐
    - 인스턴스변수 : 클래스 영역에 선언 / 인스턴스가 생성되었을 때 생성
                 : 인스턴스변수 값을 읽어오거나 저장하기 위해서는 먼저 인스턴스를 생성해야함
                 : 인스턴스마다 고유한 상태를 유지해야 하는 경우
    - 지역변수 : 클래스 영역 이외 (메서드, 생성자, 초기화 블럭 내부) 영역에 선언 / 변수 선언문이 수행되었을 때 생성


    메서드를 사용하는 이유
    : 높은 재사용성, 중복된 코드 제거, 프로그램의 구조화

    매개변수 타입 별 메서드 리턴 값
    primitive type(기본형) : int, boolean, char ... 8가지 기본형 / 기본형 값 복사됨
        -> 읽기만 가능하고 메서드로 변경할 수 없음
    reference type(참조형) : int[], String, class ... 기본형 이외의 타입들 / 인스턴스 주소 복사됨
        -> 읽기, 변경 가능


    <3.11 클래스 메서드(static 메서드)와 인스턴스 메서드>

    인스턴스 메서드 : 반드시 객체를 생성해야만 호출 가능
                 : 인스턴스 변수와 관련된 작업을 하는, 메서드의 작업을 수행하는데 인스턴스 변수를 필요로 하는 메서드
                 
    클래스 메서드 : 객체를 생성하지 않고도 " 클래스이름.메서드이름(매개변수) " 로 호출 가능
                : 인스턴스 변수나 인스턴스 메서드를 사용하지 않는 메서드
    (++ 클래스 영역에 선언된 변수 = 멤버변수 = 인스턴스 변수, 클래스변수(static 변수) 모두 통칭)

    - 1. 클래스를 설계할 때 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static 붙임

    - 2. 클래스 변수(static 변수)는 인스턴스를 생성하지 않아도 사용할 수 있음
        -> static 이 붙은 변수는 클래스가 메모리에 올라갈 때 자동으로 생성됨

    - 3. 클래스 메서드(static 메서드)는 인스턴스 변수를 사용할 수 없음
        -> 인스턴스 메서드나 인스턴스 변수에서는 static 이 붙은 멤버들 사용 가능

    - 4. 메서드 내에서 인스턴스 변수를 사용하지 않는다면 static 을 붙이는 것을 고려함
        -> 메서드 호출시간이 짧아지기 때문에 성능 향상됨


    <3.12 클래스 멤버와 인스턴스 멤버 간의 참조와 호출>
    클래스 멤버가 인스턴스 멤버를 참조 또는 호출하고자 하는 경우에는 인스턴스 생성해야함
    (인스턴스 멤버(변수, 메서드)가 존재하는 시점에 클래스 멤버는 항상 존재하지만,
    클래스 멤버가 존재하는 시점에 인스턴스 멤버가 존재하지 않을 수도 있기 때문)


    <4. 오버로딩>
    정의 : 같은 이름을 가진 메서드가 있더라도 매개변수 개수 또는 타입을 달리해서 메서드 정의할 수 있음
        : 반환 타입은 관련 없음
    장점 : 근본적으로 같은 기능을 하는 메서드들이지만 서로 이름을 다르게 하면 일일이 구분해서 작성, 기억해야함
        : 오버로딩하면 메서드 이름만 보고도 같은 기능을 할 메서드인지 쉽게 예측 가능
        : 메서드 이름 절약


    가변 인자(varargs)와 오버로딩
    - 메서드의 매개변수 개수 동적으로 지정 가능
    - '타입... 변수명' 으로 선언 (ex Object... args)
    - printf() 가 대표적    
    - 가변 인자를 매개변수 중 맨 마지막에 선언해야함


    <5. 생성자(constructor)>
    정의 : 인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드
        : 클래스 이름과 같음, 리턴 값 없음
        : 인스턴스 변수들의 초기화에 사용되는 특별한 메서드 이지
         생성자가 인스턴스를 생성하는 것은 아님 ( 연산자 new 가 인스턴스를 생성)

    수행되는 과정
    ex) Card c = new Card();
    1st 연산자 new 에 의해 메모리(heap)에 Card 클래스의 인스턴스 생성
    2nd 생성자 Card()가 호출되어 수행
    3rd 연산자 new 의 결과로 생성된 Card 인스턴스 주소가 반환되어 참조변수 c 에 저장

    기본 생성자 : 클래스 이름() {}
             : 클래스 내에 생성자가 하나도 없는 경우 컴파일러가 자동적으로 기본 생성자 추가

    생성자에서 다른 생성자 호출하기
    : 생성자 간에도 서로 호출 가능
    : 생성자의 이름으로 클래스 이름 대신 this 사용
    : 한 생성자에서 다른 생성자 호출할 때 반드시 첫줄에서만 호출 가능

    this : 참조변수로 인스턴스 자신을 가리킴(인스턴스 주소 저장) -> 인스턴스 변수에 접근
         : 모든 인스턴스 메서드에 지역변수로 숨겨진 채 존재
         : static 메서드에서는 인스턴스 멤버들을 사용할 수 없음
          (static 메서드는 인스턴스를 생성하지 않고도 호출될 수 있기 때문에
           static 메서드가 호출된 시점에 인스턴스가 존재하지 않을 수 있음)
    this(), this(매개변수) : 생성자, 같은 클래스의 다른 생성자를 호출할 때 사용

    생성자를 이용한 인스턴스 복사
    : 현재 사용하고 있는 인스턴스와 같은 상태
    (두 인스턴스의 모든 인스턴스 변수(상태)가 동일한 값을 가짐)를 갖는 인스턴스를 하나 더 만들 수 있음)
    
    
    <6. 변수의 초기화>
    정의 : 변수를 선언하고 처음으로 값을 저장하는 것
        : 멤버변수(인스턴스 변수, 클래스 변수)는 초기화 하지 않아도 자동으로 변수의 자료형에 맞는 기본값으로 초기화
        : 지역변수는 사용하기 전에 반드시 초기화 해야함
    
    멤버변수 초기화 방법
    1) 명시적 초기화(explicit initialization)
    : 변수를 선언과 동시에 초기화하는 것
    (ex 
    class Car {
        int door = 4;   // primitive type 변수 초기화
        Engine e = new Engine();    // reference type 변수 초기화
    })
    
    2) 생성자(constructor)
    
    3) 초기화 블럭(initialization block)
    - 인스턴스 초기화 블럭 : 인스턴스 변수를 초기화 하는데 사용
                        : 클래스의 모든 생성자에 공통으로 수행되어야 하는 문장들이 있는 경우
                         인스턴스 블럭에 넣어 코드 중복 제거 
    - 클래스 초기화 블럭 : 클래스 변수를 초기화 하는데 사용
                      : static { }
    (ex
    Car() {
        count++;
        serialNo = count;
        color = "White";
        gearType = "Auto";
    }
    Car(String color, String gearType) {
        count++;
        serialNo = count;
        this.color = color;
        this.gearType = gearType;
    }

    --> 인스턴스 초기화 블럭 사용
    { count++;
      serialNo = count;
    }
    Car() {
        color = "White";
        gearType = "Auto";
    }
    Car(String color, String gearType) {
        this.color = color;
        this.gearType = gearType;
    }
     */


}
