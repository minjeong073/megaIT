package standard.ch6OOP.example;

public class OOP1 {

    /*

    객체지향언어
    "실제 세계는 사물(객체)로 이루어져 있으며, 발생하는 모든 사건들은 사물간의 상호작용이다"

    특징 : 코드의 재사용성이 높다
        : 코드의 관리가 용이하다
        : 신뢰성이 높은 프로그래밍을 가능하게 한다
        (제어자와 메서드를 이용해서 데이터 보호, 유지)

    ** 재사용성, 유지보수, 중복된 코드 제거 **

    클래스 : 객체를 정의해 놓은 것 -> 객체를 생성하는데 사용됨
    객체 : 실제로 존재하는 것(사물, 개념) -> 속성과 기능으로 구성

    1.
    클래스를 정의하고 클래스를 통해 객체를 생성하는 이유
    : 클래스를 한번만 잘 만들어 놓으면 매번 객체를 생성할 때마다 어떻게 객체를 만들어야 할지 고민하지 않아도 됨

    instantiate (클래스의 인스턴스화) : 클래스로부터 객체를 만드는 과정
    instance (클래스의 인스턴스) : 클래스로부터 만들어진 객체

    2.
    객체가 가지고 있는 속성과 기능 = 객체의 멤버(member)
    속성(property) : 멤버변수(member variable), 특성(attribute), 필드(field), 상태(state)
    기능(function) : 메서드(method), 함수(function), 행위(behavior)

     */

    /*
    < 2.6 클래스의 또 다른 정의>

    변수(데이터)와 함수를 하나의 클래스에 저장
    --> C 언어에서는 문자열을 문자의 배열로 다루지만 자바에서는 String 이라는 클래스로 문자열을 다룸
        문자열을 단순히 문자의 배열로 정의하지 않고, 문자열과 문자열을 다루는데 필요한 함수들을 함께 묶기 위함

    클래스 - 사용자 정의 타입
    : 자료형(primitive type) 이외에 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는 것
    : 클래스가 곧 사용자 정의 타입


    <3. 변수와 메서드>

    종류 : 클래스변수, 인스턴스변수, 지역변수

    - 클래스변수 : 클래스 영역에 선언 / 클래스가 메모리에 올라갈 때 생성
               : 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 할 경우
               : 인스턴스를 생성하지 않고도 '클래스이름.클래스변수' 로 사용 가능
               : public 붙이면 같은 프로그램 내에서 어디서나 접근 할 수 있는 전역변수 성격을 가짐
    - 인스턴스변수 : 클래스 영역에 선언 / 인스턴스가 생성되었을 때 생성
                 : 인스턴스변수 값을 읽어오거나 저장하기 위해서는 먼저 인스턴스를 생성해야함
                 : 인스턴스마다 고유한 상태를 유지해야 하는 경우
    - 지역변수 : 클래스 영역 이외 (메서드, 생성자, 초기화 블럭 내부) 영역에 선언 / 변수 선언문이 수행되었을 때 생성


     */


}
