Spring MVC

M : Model 데이터 / .sql / @Repository
V : View 화면 / .jsp / @Service
C : Controller 로직 / .java / @Controller

기존과 다르게 각각 서로 다른 파일에서 MVC 를 사용해
파일 끼리 데이터 주고받을 수 있도록 변경해야함

--------------------------------------

## mybatis 연동하기

src/main/java/com. ... / ...Application.java 에

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
package com.ming.spring.ex;

import java.io.IOException;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;


@MapperScan(basePackages="com.ming.spring.ex.*")
@SpringBootApplication
public class SpringExampleApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringExampleApplication.class, args);
	}
	
	// 이를 기반으로 DB 사용
	@Bean
	public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
		
		SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		
		Resource[] res = new PathMatchingResourcePatternResolver().getResources("classpath:mappers/*Mapper.xml");
		sessionFactory.setMapperLocations(res);
		
		return sessionFactory.getObject();
		
	}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 추가
++

src/main/resources/application.properties 에

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/ming_0707
spring.datasource.username=root
spring.datasource.password=root


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 추가

--------------------------------------

presentation layer (view - controller) 화면 
business layer (- service -) 로직
persistence layer (repository - database) 데이터

화면 : 데이터 채워 넣는 과정 + 화면 구성하는 과정만 
로직 : 중간 (연결) 과정
데이터 : db에서 데이터 가져오는 과정만

과정 사이에는 DTO, Entity 

Entity : 값들을 모두 저장할 수 있도록 하는 객체?
DTO : Entity 일 수도 있고
	: 화면에 전달할 수 있는 정보 데이터 자체

--------------------------------------

MVC에 따라서
presentation layer
controller 
: req, resp

business layer
BO(business object) package : 데이터 조회할 수 있는 layer

persistence layer
DAO(data access object) package : interface 구성
		: 이를 통해 쿼리 수행
		-> 실제 쿼리 수행은 xml 로 

dao 와 xml 은 세트
-> mybatis 로 실행됨

--------------------------------------

xml mapper : mybatis 사용법 대로 작성
<mapper namespace="com.ming.spring.ex.database.dao.UsedGoodsDAO">

<select id=" DAO 의 method 명" resultType=" DAO 의 method 의 리턴 타입">
resultType 은 자동으로 list


SELECT * FROM `used_goods`
대신에 
SELECT
`id`
, `sellerId`
, `title`
, `price`
, `description`
, `picture`
, `createdAt`
, `updatedAt`
FROM 
`used_goods`

추가될 경우 * 이면 변경 후에도 동작이 그대로일 수 있음(변경 알 수 없음)
-> 인지해서 직접 col 이름을 추가하는 것이 실수 없음

--------------------------------------

DAO : interface -> 객체 생성 X
-> 
웹 서버 : 동시 접속 - 사용자 별 접속 코드 다름
- 각각 직접 객체 생성하다보면 메모리 초과될 가능성 높음
-> spring framework 에서는 개발자가 직접 객체 생성하지 않고 알아서 생성 관리해줌 - 우리는 요청해서 사용하면 됨
= @Autowired

@Autowired 밑에 변수 생성해주면 우리는 객체로 사용할 수 있음

--------------------------------------

UsedGoods(model) 형태로 데이터가 왔다갔다

@Controller 가 @Service 에게 필요한 것 요청
@Service 가 DB 직접 조회할 수 없기 때문에 @Repository 에게 조회 요청
Mapper : query 수행해서 맞는 데이터 가져옴
DTD : 데이터 저장
NTT
(+ 새로운 데이터로 BO 에서 바꿔서(가공해서) 가능)

--------------------------------------

@Controller
[UsedGoodsController]

URL MApping 을 통한 관문
req, resp 데이터 관리 전달
사용자로부터 전달받은 데이터유효성 확인
뷰 연결 및 데이터 전달

@Service
[UsedGoodsBO]

controller dao 연결하는 중간 다리 역할
c 에서 전달받은 데이터를 dao 에 가공하여 전달
(c에 전달된 데이터를 dao 에게 쓰기 좋게 가공함)

dao 로부터 전달받은 데이터를 c 로 가공하여 전달

@Repository
[UsedGoodsDAO] [UsedGoodsMapper]

database query 를 통해서 db 조회 저장 수정 삭제
mapper 에것 작서오딘 q 를 dao 를 통해서 메서드로 접근
dao 는 java xml 형태의 쿼리를 이어주는 중간 다리

--------------------------------------

@Autowired
객체를 spring 에서 자동으로 생성해줌
class 를 spring bean 으로 등록해야 사용 가능
(@c @s @r 로 spring bean 등록)

spring에서 객체 관리를 효율적으로 하기 위해 사용
DI IoC POJO












