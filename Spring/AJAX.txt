
AJAX

----------------------------------------
<!-- jQuery cdn -->
<script 
	src="https://code.jquery.com/jquery-3.6.0.min.js" 
	integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" 
	crossorigin="anonymous">
</script>

-----------------------------------------


브라우저에 맡겨놓은 req, resp 를 개발자가 직접 관여

직접 req 만들어서 웹서버에서 원하는 정보 요청
직접 resp 받아서 처리

= AJAX
(Asynchronous Javascript and XML)
(요즘은 xml 쓰지 않음)

비동기 자바스크립트와 xml
js 기반의 http 통신 제어
브라우저 안의 브라우저


새로고침

또 새로운 요청을 하면 기존 데이터 새로 바뀐 채 resp 로 전송됨
ajax 가 요청하면 브라우저가 새로고침 하지 않고 변경됨

ajax : resp 에 html 화면에 꾸미기 어려움
html 을 resp 로 받는게 아니라 json 형태의 data 를 전달받음

-----------------------------------------


view : 브라우저에 의한 요청을 처리해서 html resp 에 받아 보여주는 것
(Rest) API : 요청에 의해 만들어진 결과를 순수 data 형태(json)로 resp에 받는 것
(다른 기능을 추가한 것 = Rest API)

** API - view 기반으로 돌아갔지만, 현재 최신 버전들은 AJAX 를 통해서 새로운 데이터 받아서 화면 아래에 붙임 
 - 화면을 새로 구성하는 것이 아니라 추가 데이터만 
 - 요즘의 FE

정리)
이동 새로고침 없이 서버와 통신 가능
js 객체 형태로 주고받음
view 화면이 아닌 json 을 주고받는데 사용
DOM tree를 사용

----------------------------------------------

js 안에 구현
jQuery 에 있는 AJAX 를 수행하는 query


<script>
    $.ajax({
        type:"GET",
        url:"/test",
        dataType:"JSON", 
        data: {"name":"name", "email":"email"},
        success : function(data) {
            // 통신 성공시 함수 수행. 
	    // data에 response 값이 들어있다.
        },
        complete : function(data) {
            // 통신이 성공했거나 실패해도 완료되면 함수 수행
        },
        error : function(xhr, status, error) {
            // 통신 후 에러 발생시 함수 수행
        }
    });
</script>

--------------------------------------------

Asynchronous : 비동기

코드는 single thread 로 사용
- 동기 : 코드가 끝나면 그 다음 코드 진행
- 비동기 : multi thread 로 결과 상관 없이 다음 코드 진행
	: 프로그램이 요청하고나서 응답 올때까지 기다릴 필요 없어짐
	: req 하면 success, error 함수를 미리 등록해서 나중에 resp 가 오면 해당되는 함수가 실행되도독
(ex click event)

----------------------------------------------

success:function()
: ajax 로 form 이 전송되어 data 를 가져왔을 때
어떻게 동작할지 설정하는 함수

error:function()
: 400, 404, 405, 500 등의 http 에러
+ data 잘못 입력될 경우 에러
등 일때 의 에러를 ajax 에서 직접 어떻게 동작할지 설정하는 함수


----------------------------------------------

<순서>
1st validation
2nd api 호출
3rd insert query 실행
4th insert col count = 1
5th json 형태 넘김 {result:success}
6th @Respbody -> key value 형태 json 문자열
7th ajax success 가 spring 에 의해 js data 객체 형태로 변환
8th success function 실행







