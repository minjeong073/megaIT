programm 만들어서 query 수행해서 server 접속 활용

데이터 저장하기 위한 단위 : table

[database 생성]

- 여러 테이블을 만들고 관리하는 단위
- 서비스 단위로 생성
- instagram, youtube ...

	A B C D
1
2
: 2행4열

1st 
어떤 데이터 저장할지 설계 
항목, 타입(int, String)

2nd
table 구조 만들기

(ex)
CREATE TABLE `goods` (
'id' int NOT NULL AUTO_INCREMENT primary key,
'name' varchar(16) NOT NULL,
'category' varchar(32) NPT NULL,
'createdAt' timestamp DEFAULT CURRENT_TIMESTAMP,
'updatedAt' timestamp DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4

- varchar(숫자) : 가변 문자열 , 최대 '숫자'개 문자
- timestamp : 언제 쌓였는지 시간 측정 (히스토리 -> 문제 발생, 유지보수)
	: 저장된 시간(글로벌 기반) 기준으로 알려줌
- id : 특수한 col
- AUTO_INCREMENT : 알아서 증가시켜라 (1부터 증가)
- primary key : 행을 대표하는 col 을 primary 로 설정하겠다
)

< 기본적인 type >
int 정수(4byte)
decimal(n1,n2) 고정 소수점, n1 : 전체 자리수, n2 : 소수점 자리수
(고정 소수점 : 소수점 길이 정해짐 -> 관리하기 편함)
(ex 3.14 : decimai(3,2) 로 저장)
char(n) 고정형 문자, 사이즈를 아는 고정된 문자를 저장할 때 사용
varchar(n) 가변형 문자, 변화가 있는 값을 저장할 때 사용, n : 최대값
n : 주로 2의 제곱 숫자
text 가변형 큰 문자 데이터 저장, 검색을 위한 인덱스가 제공되지 않음
timestamp 날짜 저장, 타임존 지원
tinyint -127 ~ 128 사이 정수

<primary key(기본키)>
유일한 값
null X
RDB에서 기본키 필수
검색 속도 빠름
일반적으로 AUTO_INCREMENT 통해 자동 저장

<NOT NULL>
필수 항목 -> null 일 수 없음

<DEFAULT>
입력하지 않으면 기본 default 로 설정하겠다
(ex) 'updatedAt' timestamp DEFAULT CURRENT_TIMESTAMP
-> 기본 값인 CURRENT_TIMESTAMP 로 입력됨)


<ENGINE>
db server 에는 server engine, storage engine 이 존재

storage engine : 쿼리 sql 최적화 -> 어떻게 하면 빠르게 찾을지 등등
	종류 : InnoDB(많이 쓰임), MyISAM

<CHARSET>
utf8
+ mb4 : 확장형 (이모지 😊 최근 표준에 추가)

<DESC>
description
'' 테이블의 상태 확인

<DROP>
DROP TABLE 'person';
'' 테이블 삭제

<ALTER>
수정
ALTER TABLE 'person' RENAME 'user';
'person' 을 'user'로 이름 수정
RENAME : 수정
ADD, MODIFY, CHANGE COLUMN


#, --, /* */ 주석
`` (backtick) 으로 


0708

QUERY

1 INSERT

INSERT INTO 'user'
(`name`, `yyyymmdd`, `cratedAt`, `updatedAt`)
VALUE
('값', '생년월일', now(), now());

column - id : AUTO_INCREMENT 직접 값 넣지 않아도 자동 입력됨
       - 값은 ' 따옴표로 (숫자도 가능은 함)
now() 함수 : 현재 시간 넣어줌


2 SELECT
SELECT `컬럼 리스트`
FROM `user`
WHERE `name` = '김바다' AND `hobby` = '사냥하기';

`column list` 에 * 넣을 경우 = 모든 column = 전체 테이블 조회
FROM : 테이블 이름
WHERE : 조건문
-> `name` 이 '김바다' 인 것 중 `hobby` 가 '사냥하기' 인 값들 조회


3. UPDATE
UPDATE `user`
SET `email` = 'aaa@gmail.com'
WHERE id=4;

WHERE 꼭 붙여야함


4. DELETE
DELETE FROM `user` WHERE id=1;

WHERE 꼭 붙여야함

SELECT * FROM `user` WHERE id=1;
로 먼저 삭제할 값 확인한 후 맞을 경우 DELETE 하기
